# pchGenerator

import sys
import subprocess

from stack import Stack
from headers_dag import HeaderNode, HeadersDag
from process_argv import processArgv
from recursive_filter import RecursiveFilter
from should_be_in_pch import ShouldBeInPCH
from topological_sorter import TopologicalSorter

#
# parseLine
#
def parseLine( line ):
    i = 0
    length = len( line )

    while i < length and line[i] == '.':
        i += 1

    if i == 0:
        raise Exception( "Wrong line format: 'filename'" )

    if line[i] != ' ':
        raise Exception( "Wrong line format: '...filename'" )

    if i + 1 == length:
        raise Exception( "Wrong line format: '... '" )

    return ( i, line[ i + 1 : len(line) ] )

#
# generateHeadersDag
#
def generateHeadersDag( options ):
    dag = HeadersDag()

    for sourceFilename in options.files:
        output = subprocess.check_output(
            ["g++.exe", "-H", sourceFilename],
            stderr=subprocess.STDOUT,
            universal_newlines=True
        )

        for line in output.split( "\n" ):
            if len( line ) == 0:
                continue

            depth, filename = parseLine( line )
            dag.add( depth, filename )

        dag.processOneFile()

    return dag

#
# generatePCHPrologue
#
def generatePCHPrologue( options ):
    print( "// File generated by :", sys.argv[0] )
    print( "// Compilation options:", options.compilation_options )
    print( "// Threshold          :", options.threshold )
    print( "// Exclude pattern    :", options.exclude )
    print( "// Exclude but pattern:", options.exclude_except )
#
# generatePCH
#
def generatePCH( rFilter, options ):
    generatePCHPrologue( options )

    for node in rFilter.getNodes():
        print( node.getData() )

#
# runApplication
#
def runApplication():
    options = processArgv( sys.argv[1:] )

    dag = generateHeadersDag( options )

    tSorter = TopologicalSorter( dag )

    predicate = ShouldBeInPCH( options )

    rFilter = RecursiveFilter( tSorter, predicate )

    generatePCH( rFilter, options )

#
# main
#
if __name__ == "__main__":
    runApplication()
